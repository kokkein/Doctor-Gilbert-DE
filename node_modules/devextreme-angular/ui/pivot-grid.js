"use strict";
/*!
 * devextreme-angular
 * Version: 17.1.5
 * Build date: Wed Aug 02 2017
 *
 * Copyright (c) 2012 - 2017 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var pivot_grid_1 = require("devextreme/ui/pivot_grid");
var component_1 = require("../core/component");
var template_host_1 = require("../core/template-host");
var template_1 = require("../core/template");
var nested_option_1 = require("../core/nested-option");
var watcher_helper_1 = require("../core/watcher-helper");
var data_source_1 = require("./nested/data-source");
var field_dxi_1 = require("./nested/field-dxi");
var format_1 = require("./nested/format");
var store_1 = require("./nested/store");
var export_1 = require("./nested/export");
var field_chooser_1 = require("./nested/field-chooser");
var texts_1 = require("./nested/texts");
var field_panel_1 = require("./nested/field-panel");
var load_panel_1 = require("./nested/load-panel");
var scrolling_1 = require("./nested/scrolling");
var state_storing_1 = require("./nested/state-storing");
var DxPivotGridComponent = (function (_super) {
    __extends(DxPivotGridComponent, _super);
    function DxPivotGridComponent(elementRef, ngZone, templateHost, _watcherHelper, optionHost) {
        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper) || this;
        _this._createEventEmitters([
            { subscribe: 'cellClick', emit: 'onCellClick' },
            { subscribe: 'cellPrepared', emit: 'onCellPrepared' },
            { subscribe: 'contentReady', emit: 'onContentReady' },
            { subscribe: 'contextMenuPreparing', emit: 'onContextMenuPreparing' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'exported', emit: 'onExported' },
            { subscribe: 'exporting', emit: 'onExporting' },
            { subscribe: 'fileSaving', emit: 'onFileSaving' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { emit: 'allowExpandAllChange' },
            { emit: 'allowFilteringChange' },
            { emit: 'allowSortingChange' },
            { emit: 'allowSortingBySummaryChange' },
            { emit: 'dataFieldAreaChange' },
            { emit: 'dataSourceChange' },
            { emit: 'disabledChange' },
            { emit: 'elementAttrChange' },
            { emit: 'exportChange' },
            { emit: 'fieldChooserChange' },
            { emit: 'fieldPanelChange' },
            { emit: 'heightChange' },
            { emit: 'hideEmptySummaryCellsChange' },
            { emit: 'hintChange' },
            { emit: 'loadPanelChange' },
            { emit: 'rowHeaderLayoutChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'scrollingChange' },
            { emit: 'showBordersChange' },
            { emit: 'showColumnGrandTotalsChange' },
            { emit: 'showColumnTotalsChange' },
            { emit: 'showRowGrandTotalsChange' },
            { emit: 'showRowTotalsChange' },
            { emit: 'showTotalsPriorChange' },
            { emit: 'stateStoringChange' },
            { emit: 'tabIndexChange' },
            { emit: 'textsChange' },
            { emit: 'useNativeScrollingChange' },
            { emit: 'visibleChange' },
            { emit: 'widthChange' },
            { emit: 'wordWrapEnabledChange' }
        ]);
        optionHost.setHost(_this);
        return _this;
    }
    Object.defineProperty(DxPivotGridComponent.prototype, "allowExpandAll", {
        get: function () {
            return this._getOption('allowExpandAll');
        },
        set: function (value) {
            this._setOption('allowExpandAll', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "allowFiltering", {
        get: function () {
            return this._getOption('allowFiltering');
        },
        set: function (value) {
            this._setOption('allowFiltering', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "allowSorting", {
        get: function () {
            return this._getOption('allowSorting');
        },
        set: function (value) {
            this._setOption('allowSorting', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "allowSortingBySummary", {
        get: function () {
            return this._getOption('allowSortingBySummary');
        },
        set: function (value) {
            this._setOption('allowSortingBySummary', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "dataFieldArea", {
        get: function () {
            return this._getOption('dataFieldArea');
        },
        set: function (value) {
            this._setOption('dataFieldArea', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "dataSource", {
        get: function () {
            return this._getOption('dataSource');
        },
        set: function (value) {
            this._setOption('dataSource', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "disabled", {
        get: function () {
            return this._getOption('disabled');
        },
        set: function (value) {
            this._setOption('disabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "elementAttr", {
        get: function () {
            return this._getOption('elementAttr');
        },
        set: function (value) {
            this._setOption('elementAttr', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "export", {
        get: function () {
            return this._getOption('export');
        },
        set: function (value) {
            this._setOption('export', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "fieldChooser", {
        get: function () {
            return this._getOption('fieldChooser');
        },
        set: function (value) {
            this._setOption('fieldChooser', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "fieldPanel", {
        get: function () {
            return this._getOption('fieldPanel');
        },
        set: function (value) {
            this._setOption('fieldPanel', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "height", {
        get: function () {
            return this._getOption('height');
        },
        set: function (value) {
            this._setOption('height', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "hideEmptySummaryCells", {
        get: function () {
            return this._getOption('hideEmptySummaryCells');
        },
        set: function (value) {
            this._setOption('hideEmptySummaryCells', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "hint", {
        get: function () {
            return this._getOption('hint');
        },
        set: function (value) {
            this._setOption('hint', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "loadPanel", {
        get: function () {
            return this._getOption('loadPanel');
        },
        set: function (value) {
            this._setOption('loadPanel', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "rowHeaderLayout", {
        get: function () {
            return this._getOption('rowHeaderLayout');
        },
        set: function (value) {
            this._setOption('rowHeaderLayout', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "rtlEnabled", {
        get: function () {
            return this._getOption('rtlEnabled');
        },
        set: function (value) {
            this._setOption('rtlEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "scrolling", {
        get: function () {
            return this._getOption('scrolling');
        },
        set: function (value) {
            this._setOption('scrolling', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "showBorders", {
        get: function () {
            return this._getOption('showBorders');
        },
        set: function (value) {
            this._setOption('showBorders', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "showColumnGrandTotals", {
        get: function () {
            return this._getOption('showColumnGrandTotals');
        },
        set: function (value) {
            this._setOption('showColumnGrandTotals', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "showColumnTotals", {
        get: function () {
            return this._getOption('showColumnTotals');
        },
        set: function (value) {
            this._setOption('showColumnTotals', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "showRowGrandTotals", {
        get: function () {
            return this._getOption('showRowGrandTotals');
        },
        set: function (value) {
            this._setOption('showRowGrandTotals', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "showRowTotals", {
        get: function () {
            return this._getOption('showRowTotals');
        },
        set: function (value) {
            this._setOption('showRowTotals', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "showTotalsPrior", {
        get: function () {
            return this._getOption('showTotalsPrior');
        },
        set: function (value) {
            this._setOption('showTotalsPrior', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "stateStoring", {
        get: function () {
            return this._getOption('stateStoring');
        },
        set: function (value) {
            this._setOption('stateStoring', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "tabIndex", {
        get: function () {
            return this._getOption('tabIndex');
        },
        set: function (value) {
            this._setOption('tabIndex', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "texts", {
        get: function () {
            return this._getOption('texts');
        },
        set: function (value) {
            this._setOption('texts', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "useNativeScrolling", {
        get: function () {
            return this._getOption('useNativeScrolling');
        },
        set: function (value) {
            this._setOption('useNativeScrolling', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "visible", {
        get: function () {
            return this._getOption('visible');
        },
        set: function (value) {
            this._setOption('visible', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "width", {
        get: function () {
            return this._getOption('width');
        },
        set: function (value) {
            this._setOption('width', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPivotGridComponent.prototype, "wordWrapEnabled", {
        get: function () {
            return this._getOption('wordWrapEnabled');
        },
        set: function (value) {
            this._setOption('wordWrapEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    DxPivotGridComponent.prototype._createInstance = function (element, options) {
        return new pivot_grid_1.default(element, options);
    };
    DxPivotGridComponent.prototype.ngOnDestroy = function () {
        this._destroyWidget();
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "allowExpandAll", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "allowFiltering", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "allowSorting", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "allowSortingBySummary", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "dataFieldArea", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "dataSource", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "disabled", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "elementAttr", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "export", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "fieldChooser", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "fieldPanel", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "height", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "hideEmptySummaryCells", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "hint", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "loadPanel", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "rowHeaderLayout", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "rtlEnabled", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "scrolling", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "showBorders", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "showColumnGrandTotals", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "showColumnTotals", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "showRowGrandTotals", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "showRowTotals", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "showTotalsPrior", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "stateStoring", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "tabIndex", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "texts", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "useNativeScrolling", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "visible", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "width", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxPivotGridComponent.prototype, "wordWrapEnabled", null);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "onCellClick", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "onCellPrepared", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "onContentReady", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "onContextMenuPreparing", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "onDisposing", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "onExported", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "onExporting", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "onFileSaving", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "onInitialized", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "onOptionChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "allowExpandAllChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "allowFilteringChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "allowSortingChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "allowSortingBySummaryChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "dataFieldAreaChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "dataSourceChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "disabledChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "elementAttrChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "exportChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "fieldChooserChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "fieldPanelChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "heightChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "hideEmptySummaryCellsChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "hintChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "loadPanelChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "rowHeaderLayoutChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "rtlEnabledChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "scrollingChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "showBordersChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "showColumnGrandTotalsChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "showColumnTotalsChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "showRowGrandTotalsChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "showRowTotalsChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "showTotalsPriorChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "stateStoringChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "tabIndexChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "textsChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "useNativeScrollingChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "visibleChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "widthChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxPivotGridComponent.prototype, "wordWrapEnabledChange", void 0);
    DxPivotGridComponent = __decorate([
        core_1.Component({
            selector: 'dx-pivot-grid',
            template: '',
            providers: [
                template_host_1.DxTemplateHost,
                watcher_helper_1.WatcherHelper,
                nested_option_1.NestedOptionHost
            ]
        }),
        __metadata("design:paramtypes", [core_1.ElementRef, core_1.NgZone, template_host_1.DxTemplateHost,
            watcher_helper_1.WatcherHelper, nested_option_1.NestedOptionHost])
    ], DxPivotGridComponent);
    return DxPivotGridComponent;
}(component_1.DxComponent));
exports.DxPivotGridComponent = DxPivotGridComponent;
var DxPivotGridModule = (function () {
    function DxPivotGridModule() {
    }
    DxPivotGridModule = __decorate([
        core_1.NgModule({
            imports: [
                data_source_1.DxoDataSourceModule,
                field_dxi_1.DxiFieldModule,
                format_1.DxoFormatModule,
                store_1.DxoStoreModule,
                export_1.DxoExportModule,
                field_chooser_1.DxoFieldChooserModule,
                texts_1.DxoTextsModule,
                field_panel_1.DxoFieldPanelModule,
                load_panel_1.DxoLoadPanelModule,
                scrolling_1.DxoScrollingModule,
                state_storing_1.DxoStateStoringModule,
                template_1.DxTemplateModule
            ],
            declarations: [
                DxPivotGridComponent
            ],
            exports: [
                DxPivotGridComponent,
                data_source_1.DxoDataSourceModule,
                field_dxi_1.DxiFieldModule,
                format_1.DxoFormatModule,
                store_1.DxoStoreModule,
                export_1.DxoExportModule,
                field_chooser_1.DxoFieldChooserModule,
                texts_1.DxoTextsModule,
                field_panel_1.DxoFieldPanelModule,
                load_panel_1.DxoLoadPanelModule,
                scrolling_1.DxoScrollingModule,
                state_storing_1.DxoStateStoringModule,
                template_1.DxTemplateModule
            ],
        })
    ], DxPivotGridModule);
    return DxPivotGridModule;
}());
exports.DxPivotGridModule = DxPivotGridModule;
//# sourceMappingURL=pivot-grid.js.map