"use strict";
/*!
 * devextreme-angular
 * Version: 17.1.5
 * Build date: Wed Aug 02 2017
 *
 * Copyright (c) 2012 - 2017 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var tree_map_1 = require("devextreme/viz/tree_map");
var component_1 = require("../core/component");
var template_host_1 = require("../core/template-host");
var template_1 = require("../core/template");
var nested_option_1 = require("../core/nested-option");
var watcher_helper_1 = require("../core/watcher-helper");
var iterable_differ_helper_1 = require("../core/iterable-differ-helper");
var colorizer_1 = require("./nested/colorizer");
var export_1 = require("./nested/export");
var group_1 = require("./nested/group");
var border_1 = require("./nested/border");
var hover_style_1 = require("./nested/hover-style");
var label_1 = require("./nested/label");
var font_1 = require("./nested/font");
var selection_style_1 = require("./nested/selection-style");
var loading_indicator_1 = require("./nested/loading-indicator");
var size_1 = require("./nested/size");
var tile_1 = require("./nested/tile");
var title_1 = require("./nested/title");
var margin_1 = require("./nested/margin");
var subtitle_1 = require("./nested/subtitle");
var tooltip_1 = require("./nested/tooltip");
var format_1 = require("./nested/format");
var shadow_1 = require("./nested/shadow");
var DxTreeMapComponent = (function (_super) {
    __extends(DxTreeMapComponent, _super);
    function DxTreeMapComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost) {
        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper) || this;
        _this._watcherHelper = _watcherHelper;
        _this._idh = _idh;
        _this._createEventEmitters([
            { subscribe: 'click', emit: 'onClick' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'drawn', emit: 'onDrawn' },
            { subscribe: 'drill', emit: 'onDrill' },
            { subscribe: 'exported', emit: 'onExported' },
            { subscribe: 'exporting', emit: 'onExporting' },
            { subscribe: 'fileSaving', emit: 'onFileSaving' },
            { subscribe: 'hoverChanged', emit: 'onHoverChanged' },
            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'nodesInitialized', emit: 'onNodesInitialized' },
            { subscribe: 'nodesRendering', emit: 'onNodesRendering' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
            { emit: 'childrenFieldChange' },
            { emit: 'colorFieldChange' },
            { emit: 'colorizerChange' },
            { emit: 'dataSourceChange' },
            { emit: 'elementAttrChange' },
            { emit: 'exportChange' },
            { emit: 'groupChange' },
            { emit: 'hoverEnabledChange' },
            { emit: 'idFieldChange' },
            { emit: 'interactWithGroupChange' },
            { emit: 'labelFieldChange' },
            { emit: 'layoutAlgorithmChange' },
            { emit: 'layoutDirectionChange' },
            { emit: 'loadingIndicatorChange' },
            { emit: 'maxDepthChange' },
            { emit: 'parentFieldChange' },
            { emit: 'pathModifiedChange' },
            { emit: 'redrawOnResizeChange' },
            { emit: 'resolveLabelOverflowChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'selectionModeChange' },
            { emit: 'sizeChange' },
            { emit: 'themeChange' },
            { emit: 'tileChange' },
            { emit: 'titleChange' },
            { emit: 'tooltipChange' },
            { emit: 'valueFieldChange' }
        ]);
        _this._idh.setHost(_this);
        optionHost.setHost(_this);
        return _this;
    }
    Object.defineProperty(DxTreeMapComponent.prototype, "childrenField", {
        get: function () {
            return this._getOption('childrenField');
        },
        set: function (value) {
            this._setOption('childrenField', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "colorField", {
        get: function () {
            return this._getOption('colorField');
        },
        set: function (value) {
            this._setOption('colorField', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "colorizer", {
        get: function () {
            return this._getOption('colorizer');
        },
        set: function (value) {
            this._setOption('colorizer', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "dataSource", {
        get: function () {
            return this._getOption('dataSource');
        },
        set: function (value) {
            this._setOption('dataSource', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "elementAttr", {
        get: function () {
            return this._getOption('elementAttr');
        },
        set: function (value) {
            this._setOption('elementAttr', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "export", {
        get: function () {
            return this._getOption('export');
        },
        set: function (value) {
            this._setOption('export', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "group", {
        get: function () {
            return this._getOption('group');
        },
        set: function (value) {
            this._setOption('group', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "hoverEnabled", {
        get: function () {
            return this._getOption('hoverEnabled');
        },
        set: function (value) {
            this._setOption('hoverEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "idField", {
        get: function () {
            return this._getOption('idField');
        },
        set: function (value) {
            this._setOption('idField', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "interactWithGroup", {
        get: function () {
            return this._getOption('interactWithGroup');
        },
        set: function (value) {
            this._setOption('interactWithGroup', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "labelField", {
        get: function () {
            return this._getOption('labelField');
        },
        set: function (value) {
            this._setOption('labelField', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "layoutAlgorithm", {
        get: function () {
            return this._getOption('layoutAlgorithm');
        },
        set: function (value) {
            this._setOption('layoutAlgorithm', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "layoutDirection", {
        get: function () {
            return this._getOption('layoutDirection');
        },
        set: function (value) {
            this._setOption('layoutDirection', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "loadingIndicator", {
        get: function () {
            return this._getOption('loadingIndicator');
        },
        set: function (value) {
            this._setOption('loadingIndicator', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "maxDepth", {
        get: function () {
            return this._getOption('maxDepth');
        },
        set: function (value) {
            this._setOption('maxDepth', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "parentField", {
        get: function () {
            return this._getOption('parentField');
        },
        set: function (value) {
            this._setOption('parentField', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "pathModified", {
        get: function () {
            return this._getOption('pathModified');
        },
        set: function (value) {
            this._setOption('pathModified', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "redrawOnResize", {
        get: function () {
            return this._getOption('redrawOnResize');
        },
        set: function (value) {
            this._setOption('redrawOnResize', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "resolveLabelOverflow", {
        get: function () {
            return this._getOption('resolveLabelOverflow');
        },
        set: function (value) {
            this._setOption('resolveLabelOverflow', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "rtlEnabled", {
        get: function () {
            return this._getOption('rtlEnabled');
        },
        set: function (value) {
            this._setOption('rtlEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "selectionMode", {
        get: function () {
            return this._getOption('selectionMode');
        },
        set: function (value) {
            this._setOption('selectionMode', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "size", {
        get: function () {
            return this._getOption('size');
        },
        set: function (value) {
            this._setOption('size', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "theme", {
        get: function () {
            return this._getOption('theme');
        },
        set: function (value) {
            this._setOption('theme', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "tile", {
        get: function () {
            return this._getOption('tile');
        },
        set: function (value) {
            this._setOption('tile', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "title", {
        get: function () {
            return this._getOption('title');
        },
        set: function (value) {
            this._setOption('title', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "tooltip", {
        get: function () {
            return this._getOption('tooltip');
        },
        set: function (value) {
            this._setOption('tooltip', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "valueField", {
        get: function () {
            return this._getOption('valueField');
        },
        set: function (value) {
            this._setOption('valueField', value);
        },
        enumerable: true,
        configurable: true
    });
    DxTreeMapComponent.prototype._createInstance = function (element, options) {
        return new tree_map_1.default(element, options);
    };
    DxTreeMapComponent.prototype.ngOnDestroy = function () {
        this._destroyWidget();
    };
    DxTreeMapComponent.prototype.ngOnChanges = function (changes) {
        this._idh.setup('dataSource', changes);
    };
    DxTreeMapComponent.prototype.ngDoCheck = function () {
        this._idh.doCheck('dataSource');
        this._watcherHelper.checkWatchers();
    };
    DxTreeMapComponent.prototype._updateOption = function (name, value) {
        if (Array.isArray(value)) {
            this._idh.setupSingle(name, value);
            this._idh.getChanges(name, value);
        }
        _super.prototype._updateOption.call(this, name, value);
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "childrenField", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "colorField", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "colorizer", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "dataSource", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "elementAttr", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "export", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "group", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "hoverEnabled", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "idField", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "interactWithGroup", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "labelField", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "layoutAlgorithm", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "layoutDirection", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "loadingIndicator", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "maxDepth", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "parentField", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "pathModified", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "redrawOnResize", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "resolveLabelOverflow", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "rtlEnabled", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "selectionMode", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "size", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "theme", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "tile", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "title", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "tooltip", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "valueField", null);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "onClick", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "onDisposing", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "onDrawn", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "onDrill", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "onExported", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "onExporting", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "onFileSaving", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "onHoverChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "onIncidentOccurred", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "onInitialized", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "onNodesInitialized", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "onNodesRendering", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "onOptionChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "onSelectionChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "childrenFieldChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "colorFieldChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "colorizerChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "dataSourceChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "elementAttrChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "exportChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "groupChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "hoverEnabledChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "idFieldChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "interactWithGroupChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "labelFieldChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "layoutAlgorithmChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "layoutDirectionChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "loadingIndicatorChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "maxDepthChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "parentFieldChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "pathModifiedChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "redrawOnResizeChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "resolveLabelOverflowChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "rtlEnabledChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "selectionModeChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "sizeChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "themeChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "tileChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "titleChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "tooltipChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxTreeMapComponent.prototype, "valueFieldChange", void 0);
    DxTreeMapComponent = __decorate([
        core_1.Component({
            selector: 'dx-tree-map',
            template: '',
            styles: [' :host {  display: block; }'],
            providers: [
                template_host_1.DxTemplateHost,
                watcher_helper_1.WatcherHelper,
                nested_option_1.NestedOptionHost,
                iterable_differ_helper_1.IterableDifferHelper
            ]
        }),
        __metadata("design:paramtypes", [core_1.ElementRef, core_1.NgZone, template_host_1.DxTemplateHost,
            watcher_helper_1.WatcherHelper,
            iterable_differ_helper_1.IterableDifferHelper, nested_option_1.NestedOptionHost])
    ], DxTreeMapComponent);
    return DxTreeMapComponent;
}(component_1.DxComponent));
exports.DxTreeMapComponent = DxTreeMapComponent;
var DxTreeMapModule = (function () {
    function DxTreeMapModule() {
    }
    DxTreeMapModule = __decorate([
        core_1.NgModule({
            imports: [
                colorizer_1.DxoColorizerModule,
                export_1.DxoExportModule,
                group_1.DxoGroupModule,
                border_1.DxoBorderModule,
                hover_style_1.DxoHoverStyleModule,
                label_1.DxoLabelModule,
                font_1.DxoFontModule,
                selection_style_1.DxoSelectionStyleModule,
                loading_indicator_1.DxoLoadingIndicatorModule,
                size_1.DxoSizeModule,
                tile_1.DxoTileModule,
                title_1.DxoTitleModule,
                margin_1.DxoMarginModule,
                subtitle_1.DxoSubtitleModule,
                tooltip_1.DxoTooltipModule,
                format_1.DxoFormatModule,
                shadow_1.DxoShadowModule,
                template_1.DxTemplateModule
            ],
            declarations: [
                DxTreeMapComponent
            ],
            exports: [
                DxTreeMapComponent,
                colorizer_1.DxoColorizerModule,
                export_1.DxoExportModule,
                group_1.DxoGroupModule,
                border_1.DxoBorderModule,
                hover_style_1.DxoHoverStyleModule,
                label_1.DxoLabelModule,
                font_1.DxoFontModule,
                selection_style_1.DxoSelectionStyleModule,
                loading_indicator_1.DxoLoadingIndicatorModule,
                size_1.DxoSizeModule,
                tile_1.DxoTileModule,
                title_1.DxoTitleModule,
                margin_1.DxoMarginModule,
                subtitle_1.DxoSubtitleModule,
                tooltip_1.DxoTooltipModule,
                format_1.DxoFormatModule,
                shadow_1.DxoShadowModule,
                template_1.DxTemplateModule
            ],
        })
    ], DxTreeMapModule);
    return DxTreeMapModule;
}());
exports.DxTreeMapModule = DxTreeMapModule;
//# sourceMappingURL=tree-map.js.map