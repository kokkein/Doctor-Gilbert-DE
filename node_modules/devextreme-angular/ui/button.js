"use strict";
/*!
 * devextreme-angular
 * Version: 17.1.5
 * Build date: Wed Aug 02 2017
 *
 * Copyright (c) 2012 - 2017 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var button_1 = require("devextreme/ui/button");
var component_1 = require("../core/component");
var template_host_1 = require("../core/template-host");
var template_1 = require("../core/template");
var nested_option_1 = require("../core/nested-option");
var watcher_helper_1 = require("../core/watcher-helper");
var DxButtonComponent = (function (_super) {
    __extends(DxButtonComponent, _super);
    function DxButtonComponent(elementRef, ngZone, templateHost, _watcherHelper, optionHost) {
        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper) || this;
        _this._createEventEmitters([
            { subscribe: 'click', emit: 'onClick' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { emit: 'accessKeyChange' },
            { emit: 'activeStateEnabledChange' },
            { emit: 'disabledChange' },
            { emit: 'elementAttrChange' },
            { emit: 'focusStateEnabledChange' },
            { emit: 'heightChange' },
            { emit: 'hintChange' },
            { emit: 'hoverStateEnabledChange' },
            { emit: 'iconChange' },
            { emit: 'iconSrcChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'tabIndexChange' },
            { emit: 'templateChange' },
            { emit: 'textChange' },
            { emit: 'typeChange' },
            { emit: 'useSubmitBehaviorChange' },
            { emit: 'validationGroupChange' },
            { emit: 'visibleChange' },
            { emit: 'widthChange' }
        ]);
        optionHost.setHost(_this);
        return _this;
    }
    Object.defineProperty(DxButtonComponent.prototype, "accessKey", {
        get: function () {
            return this._getOption('accessKey');
        },
        set: function (value) {
            this._setOption('accessKey', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "activeStateEnabled", {
        get: function () {
            return this._getOption('activeStateEnabled');
        },
        set: function (value) {
            this._setOption('activeStateEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "disabled", {
        get: function () {
            return this._getOption('disabled');
        },
        set: function (value) {
            this._setOption('disabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "elementAttr", {
        get: function () {
            return this._getOption('elementAttr');
        },
        set: function (value) {
            this._setOption('elementAttr', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "focusStateEnabled", {
        get: function () {
            return this._getOption('focusStateEnabled');
        },
        set: function (value) {
            this._setOption('focusStateEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "height", {
        get: function () {
            return this._getOption('height');
        },
        set: function (value) {
            this._setOption('height', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "hint", {
        get: function () {
            return this._getOption('hint');
        },
        set: function (value) {
            this._setOption('hint', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "hoverStateEnabled", {
        get: function () {
            return this._getOption('hoverStateEnabled');
        },
        set: function (value) {
            this._setOption('hoverStateEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "icon", {
        get: function () {
            return this._getOption('icon');
        },
        set: function (value) {
            this._setOption('icon', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "iconSrc", {
        get: function () {
            return this._getOption('iconSrc');
        },
        set: function (value) {
            this._setOption('iconSrc', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "rtlEnabled", {
        get: function () {
            return this._getOption('rtlEnabled');
        },
        set: function (value) {
            this._setOption('rtlEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "tabIndex", {
        get: function () {
            return this._getOption('tabIndex');
        },
        set: function (value) {
            this._setOption('tabIndex', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "template", {
        get: function () {
            return this._getOption('template');
        },
        set: function (value) {
            this._setOption('template', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "text", {
        get: function () {
            return this._getOption('text');
        },
        set: function (value) {
            this._setOption('text', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "type", {
        get: function () {
            return this._getOption('type');
        },
        set: function (value) {
            this._setOption('type', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "useSubmitBehavior", {
        get: function () {
            return this._getOption('useSubmitBehavior');
        },
        set: function (value) {
            this._setOption('useSubmitBehavior', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "validationGroup", {
        get: function () {
            return this._getOption('validationGroup');
        },
        set: function (value) {
            this._setOption('validationGroup', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "visible", {
        get: function () {
            return this._getOption('visible');
        },
        set: function (value) {
            this._setOption('visible', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxButtonComponent.prototype, "width", {
        get: function () {
            return this._getOption('width');
        },
        set: function (value) {
            this._setOption('width', value);
        },
        enumerable: true,
        configurable: true
    });
    DxButtonComponent.prototype._createInstance = function (element, options) {
        return new button_1.default(element, options);
    };
    DxButtonComponent.prototype.ngOnDestroy = function () {
        this._destroyWidget();
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "accessKey", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "activeStateEnabled", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "disabled", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "elementAttr", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "focusStateEnabled", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "height", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "hint", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "hoverStateEnabled", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "icon", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "iconSrc", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "rtlEnabled", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "tabIndex", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "template", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "text", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "type", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "useSubmitBehavior", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "validationGroup", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "visible", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxButtonComponent.prototype, "width", null);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "onClick", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "onDisposing", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "onInitialized", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "onOptionChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "accessKeyChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "activeStateEnabledChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "disabledChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "elementAttrChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "focusStateEnabledChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "heightChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "hintChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "hoverStateEnabledChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "iconChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "iconSrcChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "rtlEnabledChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "tabIndexChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "templateChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "textChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "typeChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "useSubmitBehaviorChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "validationGroupChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "visibleChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxButtonComponent.prototype, "widthChange", void 0);
    DxButtonComponent = __decorate([
        core_1.Component({
            selector: 'dx-button',
            template: '',
            providers: [
                template_host_1.DxTemplateHost,
                watcher_helper_1.WatcherHelper,
                nested_option_1.NestedOptionHost
            ]
        }),
        __metadata("design:paramtypes", [core_1.ElementRef, core_1.NgZone, template_host_1.DxTemplateHost,
            watcher_helper_1.WatcherHelper, nested_option_1.NestedOptionHost])
    ], DxButtonComponent);
    return DxButtonComponent;
}(component_1.DxComponent));
exports.DxButtonComponent = DxButtonComponent;
var DxButtonModule = (function () {
    function DxButtonModule() {
    }
    DxButtonModule = __decorate([
        core_1.NgModule({
            imports: [
                template_1.DxTemplateModule
            ],
            declarations: [
                DxButtonComponent
            ],
            exports: [
                DxButtonComponent,
                template_1.DxTemplateModule
            ],
        })
    ], DxButtonModule);
    return DxButtonModule;
}());
exports.DxButtonModule = DxButtonModule;
//# sourceMappingURL=button.js.map