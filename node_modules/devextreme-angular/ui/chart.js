"use strict";
/*!
 * devextreme-angular
 * Version: 17.1.5
 * Build date: Wed Aug 02 2017
 *
 * Copyright (c) 2012 - 2017 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var chart_1 = require("devextreme/viz/chart");
var component_1 = require("../core/component");
var template_host_1 = require("../core/template-host");
var template_1 = require("../core/template");
var nested_option_1 = require("../core/nested-option");
var watcher_helper_1 = require("../core/watcher-helper");
var iterable_differ_helper_1 = require("../core/iterable-differ-helper");
var adaptive_layout_1 = require("./nested/adaptive-layout");
var animation_1 = require("./nested/animation");
var argument_axis_1 = require("./nested/argument-axis");
var constant_line_dxi_1 = require("./nested/constant-line-dxi");
var label_1 = require("./nested/label");
var font_1 = require("./nested/font");
var constant_line_style_1 = require("./nested/constant-line-style");
var grid_1 = require("./nested/grid");
var format_1 = require("./nested/format");
var overlapping_behavior_1 = require("./nested/overlapping-behavior");
var minor_grid_1 = require("./nested/minor-grid");
var minor_tick_1 = require("./nested/minor-tick");
var minor_tick_interval_1 = require("./nested/minor-tick-interval");
var strip_dxi_1 = require("./nested/strip-dxi");
var strip_style_1 = require("./nested/strip-style");
var tick_1 = require("./nested/tick");
var tick_interval_1 = require("./nested/tick-interval");
var title_1 = require("./nested/title");
var common_axis_settings_1 = require("./nested/common-axis-settings");
var common_pane_settings_1 = require("./nested/common-pane-settings");
var border_1 = require("./nested/border");
var common_series_settings_1 = require("./nested/common-series-settings");
var area_1 = require("./nested/area");
var hover_style_1 = require("./nested/hover-style");
var hatching_1 = require("./nested/hatching");
var connector_1 = require("./nested/connector");
var point_1 = require("./nested/point");
var image_1 = require("./nested/image");
var height_1 = require("./nested/height");
var url_1 = require("./nested/url");
var width_1 = require("./nested/width");
var selection_style_1 = require("./nested/selection-style");
var reduction_1 = require("./nested/reduction");
var value_error_bar_1 = require("./nested/value-error-bar");
var bar_1 = require("./nested/bar");
var bubble_1 = require("./nested/bubble");
var candlestick_1 = require("./nested/candlestick");
var fullstackedarea_1 = require("./nested/fullstackedarea");
var fullstackedbar_1 = require("./nested/fullstackedbar");
var fullstackedline_1 = require("./nested/fullstackedline");
var fullstackedspline_1 = require("./nested/fullstackedspline");
var fullstackedsplinearea_1 = require("./nested/fullstackedsplinearea");
var argument_format_1 = require("./nested/argument-format");
var line_1 = require("./nested/line");
var rangearea_1 = require("./nested/rangearea");
var rangebar_1 = require("./nested/rangebar");
var scatter_1 = require("./nested/scatter");
var spline_1 = require("./nested/spline");
var splinearea_1 = require("./nested/splinearea");
var stackedarea_1 = require("./nested/stackedarea");
var stackedbar_1 = require("./nested/stackedbar");
var stackedline_1 = require("./nested/stackedline");
var stackedspline_1 = require("./nested/stackedspline");
var stackedsplinearea_1 = require("./nested/stackedsplinearea");
var steparea_1 = require("./nested/steparea");
var stepline_1 = require("./nested/stepline");
var stock_1 = require("./nested/stock");
var crosshair_1 = require("./nested/crosshair");
var horizontal_line_1 = require("./nested/horizontal-line");
var vertical_line_1 = require("./nested/vertical-line");
var data_prepare_settings_1 = require("./nested/data-prepare-settings");
var export_1 = require("./nested/export");
var legend_1 = require("./nested/legend");
var margin_1 = require("./nested/margin");
var loading_indicator_1 = require("./nested/loading-indicator");
var pane_dxi_1 = require("./nested/pane-dxi");
var scroll_bar_1 = require("./nested/scroll-bar");
var series_dxi_1 = require("./nested/series-dxi");
var series_template_1 = require("./nested/series-template");
var size_1 = require("./nested/size");
var subtitle_1 = require("./nested/subtitle");
var tooltip_1 = require("./nested/tooltip");
var shadow_1 = require("./nested/shadow");
var value_axis_dxi_1 = require("./nested/value-axis-dxi");
var pane_dxi_2 = require("./nested/pane-dxi");
var series_dxi_2 = require("./nested/series-dxi");
var value_axis_dxi_2 = require("./nested/value-axis-dxi");
var DxChartComponent = (function (_super) {
    __extends(DxChartComponent, _super);
    function DxChartComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost) {
        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper) || this;
        _this._watcherHelper = _watcherHelper;
        _this._idh = _idh;
        _this._createEventEmitters([
            { subscribe: 'argumentAxisClick', emit: 'onArgumentAxisClick' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'done', emit: 'onDone' },
            { subscribe: 'drawn', emit: 'onDrawn' },
            { subscribe: 'exported', emit: 'onExported' },
            { subscribe: 'exporting', emit: 'onExporting' },
            { subscribe: 'fileSaving', emit: 'onFileSaving' },
            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'legendClick', emit: 'onLegendClick' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'pointClick', emit: 'onPointClick' },
            { subscribe: 'pointHoverChanged', emit: 'onPointHoverChanged' },
            { subscribe: 'pointSelectionChanged', emit: 'onPointSelectionChanged' },
            { subscribe: 'seriesClick', emit: 'onSeriesClick' },
            { subscribe: 'seriesHoverChanged', emit: 'onSeriesHoverChanged' },
            { subscribe: 'seriesSelectionChanged', emit: 'onSeriesSelectionChanged' },
            { subscribe: 'tooltipHidden', emit: 'onTooltipHidden' },
            { subscribe: 'tooltipShown', emit: 'onTooltipShown' },
            { subscribe: 'zoomEnd', emit: 'onZoomEnd' },
            { subscribe: 'zoomStart', emit: 'onZoomStart' },
            { emit: 'adaptiveLayoutChange' },
            { emit: 'adjustOnZoomChange' },
            { emit: 'animationChange' },
            { emit: 'argumentAxisChange' },
            { emit: 'barWidthChange' },
            { emit: 'commonAxisSettingsChange' },
            { emit: 'commonPaneSettingsChange' },
            { emit: 'commonSeriesSettingsChange' },
            { emit: 'containerBackgroundColorChange' },
            { emit: 'crosshairChange' },
            { emit: 'customizeLabelChange' },
            { emit: 'customizePointChange' },
            { emit: 'dataPrepareSettingsChange' },
            { emit: 'dataSourceChange' },
            { emit: 'defaultPaneChange' },
            { emit: 'elementAttrChange' },
            { emit: 'equalBarWidthChange' },
            { emit: 'exportChange' },
            { emit: 'legendChange' },
            { emit: 'loadingIndicatorChange' },
            { emit: 'marginChange' },
            { emit: 'maxBubbleSizeChange' },
            { emit: 'minBubbleSizeChange' },
            { emit: 'negativesAsZeroesChange' },
            { emit: 'paletteChange' },
            { emit: 'panesChange' },
            { emit: 'pathModifiedChange' },
            { emit: 'pointSelectionModeChange' },
            { emit: 'redrawOnResizeChange' },
            { emit: 'resolveLabelOverlappingChange' },
            { emit: 'rotatedChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'scrollBarChange' },
            { emit: 'scrollingModeChange' },
            { emit: 'seriesChange' },
            { emit: 'seriesSelectionModeChange' },
            { emit: 'seriesTemplateChange' },
            { emit: 'sizeChange' },
            { emit: 'synchronizeMultiAxesChange' },
            { emit: 'themeChange' },
            { emit: 'titleChange' },
            { emit: 'tooltipChange' },
            { emit: 'useAggregationChange' },
            { emit: 'valueAxisChange' },
            { emit: 'zoomingModeChange' }
        ]);
        _this._idh.setHost(_this);
        optionHost.setHost(_this);
        return _this;
    }
    Object.defineProperty(DxChartComponent.prototype, "adaptiveLayout", {
        get: function () {
            return this._getOption('adaptiveLayout');
        },
        set: function (value) {
            this._setOption('adaptiveLayout', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "adjustOnZoom", {
        get: function () {
            return this._getOption('adjustOnZoom');
        },
        set: function (value) {
            this._setOption('adjustOnZoom', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "animation", {
        get: function () {
            return this._getOption('animation');
        },
        set: function (value) {
            this._setOption('animation', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "argumentAxis", {
        get: function () {
            return this._getOption('argumentAxis');
        },
        set: function (value) {
            this._setOption('argumentAxis', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "barWidth", {
        get: function () {
            return this._getOption('barWidth');
        },
        set: function (value) {
            this._setOption('barWidth', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "commonAxisSettings", {
        get: function () {
            return this._getOption('commonAxisSettings');
        },
        set: function (value) {
            this._setOption('commonAxisSettings', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "commonPaneSettings", {
        get: function () {
            return this._getOption('commonPaneSettings');
        },
        set: function (value) {
            this._setOption('commonPaneSettings', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "commonSeriesSettings", {
        get: function () {
            return this._getOption('commonSeriesSettings');
        },
        set: function (value) {
            this._setOption('commonSeriesSettings', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "containerBackgroundColor", {
        get: function () {
            return this._getOption('containerBackgroundColor');
        },
        set: function (value) {
            this._setOption('containerBackgroundColor', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "crosshair", {
        get: function () {
            return this._getOption('crosshair');
        },
        set: function (value) {
            this._setOption('crosshair', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "customizeLabel", {
        get: function () {
            return this._getOption('customizeLabel');
        },
        set: function (value) {
            this._setOption('customizeLabel', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "customizePoint", {
        get: function () {
            return this._getOption('customizePoint');
        },
        set: function (value) {
            this._setOption('customizePoint', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "dataPrepareSettings", {
        get: function () {
            return this._getOption('dataPrepareSettings');
        },
        set: function (value) {
            this._setOption('dataPrepareSettings', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "dataSource", {
        get: function () {
            return this._getOption('dataSource');
        },
        set: function (value) {
            this._setOption('dataSource', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "defaultPane", {
        get: function () {
            return this._getOption('defaultPane');
        },
        set: function (value) {
            this._setOption('defaultPane', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "elementAttr", {
        get: function () {
            return this._getOption('elementAttr');
        },
        set: function (value) {
            this._setOption('elementAttr', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "equalBarWidth", {
        get: function () {
            return this._getOption('equalBarWidth');
        },
        set: function (value) {
            this._setOption('equalBarWidth', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "export", {
        get: function () {
            return this._getOption('export');
        },
        set: function (value) {
            this._setOption('export', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "legend", {
        get: function () {
            return this._getOption('legend');
        },
        set: function (value) {
            this._setOption('legend', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "loadingIndicator", {
        get: function () {
            return this._getOption('loadingIndicator');
        },
        set: function (value) {
            this._setOption('loadingIndicator', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "margin", {
        get: function () {
            return this._getOption('margin');
        },
        set: function (value) {
            this._setOption('margin', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "maxBubbleSize", {
        get: function () {
            return this._getOption('maxBubbleSize');
        },
        set: function (value) {
            this._setOption('maxBubbleSize', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "minBubbleSize", {
        get: function () {
            return this._getOption('minBubbleSize');
        },
        set: function (value) {
            this._setOption('minBubbleSize', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "negativesAsZeroes", {
        get: function () {
            return this._getOption('negativesAsZeroes');
        },
        set: function (value) {
            this._setOption('negativesAsZeroes', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "palette", {
        get: function () {
            return this._getOption('palette');
        },
        set: function (value) {
            this._setOption('palette', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "panes", {
        get: function () {
            return this._getOption('panes');
        },
        set: function (value) {
            this._setOption('panes', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "pathModified", {
        get: function () {
            return this._getOption('pathModified');
        },
        set: function (value) {
            this._setOption('pathModified', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "pointSelectionMode", {
        get: function () {
            return this._getOption('pointSelectionMode');
        },
        set: function (value) {
            this._setOption('pointSelectionMode', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "redrawOnResize", {
        get: function () {
            return this._getOption('redrawOnResize');
        },
        set: function (value) {
            this._setOption('redrawOnResize', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "resolveLabelOverlapping", {
        get: function () {
            return this._getOption('resolveLabelOverlapping');
        },
        set: function (value) {
            this._setOption('resolveLabelOverlapping', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "rotated", {
        get: function () {
            return this._getOption('rotated');
        },
        set: function (value) {
            this._setOption('rotated', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "rtlEnabled", {
        get: function () {
            return this._getOption('rtlEnabled');
        },
        set: function (value) {
            this._setOption('rtlEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "scrollBar", {
        get: function () {
            return this._getOption('scrollBar');
        },
        set: function (value) {
            this._setOption('scrollBar', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "scrollingMode", {
        get: function () {
            return this._getOption('scrollingMode');
        },
        set: function (value) {
            this._setOption('scrollingMode', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "series", {
        get: function () {
            return this._getOption('series');
        },
        set: function (value) {
            this._setOption('series', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "seriesSelectionMode", {
        get: function () {
            return this._getOption('seriesSelectionMode');
        },
        set: function (value) {
            this._setOption('seriesSelectionMode', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "seriesTemplate", {
        get: function () {
            return this._getOption('seriesTemplate');
        },
        set: function (value) {
            this._setOption('seriesTemplate', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "size", {
        get: function () {
            return this._getOption('size');
        },
        set: function (value) {
            this._setOption('size', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "synchronizeMultiAxes", {
        get: function () {
            return this._getOption('synchronizeMultiAxes');
        },
        set: function (value) {
            this._setOption('synchronizeMultiAxes', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "theme", {
        get: function () {
            return this._getOption('theme');
        },
        set: function (value) {
            this._setOption('theme', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "title", {
        get: function () {
            return this._getOption('title');
        },
        set: function (value) {
            this._setOption('title', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "tooltip", {
        get: function () {
            return this._getOption('tooltip');
        },
        set: function (value) {
            this._setOption('tooltip', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "useAggregation", {
        get: function () {
            return this._getOption('useAggregation');
        },
        set: function (value) {
            this._setOption('useAggregation', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "valueAxis", {
        get: function () {
            return this._getOption('valueAxis');
        },
        set: function (value) {
            this._setOption('valueAxis', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "zoomingMode", {
        get: function () {
            return this._getOption('zoomingMode');
        },
        set: function (value) {
            this._setOption('zoomingMode', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "panesChildren", {
        get: function () {
            return this._getOption('panes');
        },
        set: function (value) {
            this.setChildren('panes', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "seriesChildren", {
        get: function () {
            return this._getOption('series');
        },
        set: function (value) {
            this.setChildren('series', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxChartComponent.prototype, "valueAxisChildren", {
        get: function () {
            return this._getOption('valueAxis');
        },
        set: function (value) {
            this.setChildren('valueAxis', value);
        },
        enumerable: true,
        configurable: true
    });
    DxChartComponent.prototype._createInstance = function (element, options) {
        return new chart_1.default(element, options);
    };
    DxChartComponent.prototype.ngOnDestroy = function () {
        this._destroyWidget();
    };
    DxChartComponent.prototype.ngOnChanges = function (changes) {
        this._idh.setup('dataSource', changes);
        this._idh.setup('palette', changes);
        this._idh.setup('panes', changes);
        this._idh.setup('series', changes);
        this._idh.setup('valueAxis', changes);
    };
    DxChartComponent.prototype.ngDoCheck = function () {
        this._idh.doCheck('dataSource');
        this._idh.doCheck('palette');
        this._idh.doCheck('panes');
        this._idh.doCheck('series');
        this._idh.doCheck('valueAxis');
        this._watcherHelper.checkWatchers();
    };
    DxChartComponent.prototype._updateOption = function (name, value) {
        if (Array.isArray(value)) {
            this._idh.setupSingle(name, value);
            this._idh.getChanges(name, value);
        }
        _super.prototype._updateOption.call(this, name, value);
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "adaptiveLayout", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "adjustOnZoom", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "animation", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "argumentAxis", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "barWidth", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "commonAxisSettings", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "commonPaneSettings", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "commonSeriesSettings", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "containerBackgroundColor", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "crosshair", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "customizeLabel", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "customizePoint", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "dataPrepareSettings", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "dataSource", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "defaultPane", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "elementAttr", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "equalBarWidth", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "export", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "legend", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "loadingIndicator", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "margin", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "maxBubbleSize", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "minBubbleSize", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "negativesAsZeroes", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "palette", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "panes", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "pathModified", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "pointSelectionMode", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "redrawOnResize", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "resolveLabelOverlapping", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "rotated", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "rtlEnabled", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "scrollBar", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "scrollingMode", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "series", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "seriesSelectionMode", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "seriesTemplate", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "size", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "synchronizeMultiAxes", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "theme", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "title", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "tooltip", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "useAggregation", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "valueAxis", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "zoomingMode", null);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onArgumentAxisClick", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onDisposing", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onDone", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onDrawn", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onExported", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onExporting", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onFileSaving", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onIncidentOccurred", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onInitialized", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onLegendClick", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onOptionChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onPointClick", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onPointHoverChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onPointSelectionChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onSeriesClick", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onSeriesHoverChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onSeriesSelectionChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onTooltipHidden", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onTooltipShown", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onZoomEnd", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "onZoomStart", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "adaptiveLayoutChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "adjustOnZoomChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "animationChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "argumentAxisChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "barWidthChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "commonAxisSettingsChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "commonPaneSettingsChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "commonSeriesSettingsChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "containerBackgroundColorChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "crosshairChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "customizeLabelChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "customizePointChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "dataPrepareSettingsChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "dataSourceChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "defaultPaneChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "elementAttrChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "equalBarWidthChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "exportChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "legendChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "loadingIndicatorChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "marginChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "maxBubbleSizeChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "minBubbleSizeChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "negativesAsZeroesChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "paletteChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "panesChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "pathModifiedChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "pointSelectionModeChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "redrawOnResizeChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "resolveLabelOverlappingChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "rotatedChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "rtlEnabledChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "scrollBarChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "scrollingModeChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "seriesChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "seriesSelectionModeChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "seriesTemplateChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "sizeChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "synchronizeMultiAxesChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "themeChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "titleChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "tooltipChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "useAggregationChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "valueAxisChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], DxChartComponent.prototype, "zoomingModeChange", void 0);
    __decorate([
        core_1.ContentChildren(pane_dxi_2.DxiPaneComponent),
        __metadata("design:type", core_1.QueryList),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "panesChildren", null);
    __decorate([
        core_1.ContentChildren(series_dxi_2.DxiSeriesComponent),
        __metadata("design:type", core_1.QueryList),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "seriesChildren", null);
    __decorate([
        core_1.ContentChildren(value_axis_dxi_2.DxiValueAxisComponent),
        __metadata("design:type", core_1.QueryList),
        __metadata("design:paramtypes", [Object])
    ], DxChartComponent.prototype, "valueAxisChildren", null);
    DxChartComponent = __decorate([
        core_1.Component({
            selector: 'dx-chart',
            template: '',
            styles: [' :host {  display: block; }'],
            providers: [
                template_host_1.DxTemplateHost,
                watcher_helper_1.WatcherHelper,
                nested_option_1.NestedOptionHost,
                iterable_differ_helper_1.IterableDifferHelper
            ]
        }),
        __metadata("design:paramtypes", [core_1.ElementRef, core_1.NgZone, template_host_1.DxTemplateHost,
            watcher_helper_1.WatcherHelper,
            iterable_differ_helper_1.IterableDifferHelper, nested_option_1.NestedOptionHost])
    ], DxChartComponent);
    return DxChartComponent;
}(component_1.DxComponent));
exports.DxChartComponent = DxChartComponent;
var DxChartModule = (function () {
    function DxChartModule() {
    }
    DxChartModule = __decorate([
        core_1.NgModule({
            imports: [
                adaptive_layout_1.DxoAdaptiveLayoutModule,
                animation_1.DxoAnimationModule,
                argument_axis_1.DxoArgumentAxisModule,
                constant_line_dxi_1.DxiConstantLineModule,
                label_1.DxoLabelModule,
                font_1.DxoFontModule,
                constant_line_style_1.DxoConstantLineStyleModule,
                grid_1.DxoGridModule,
                format_1.DxoFormatModule,
                overlapping_behavior_1.DxoOverlappingBehaviorModule,
                minor_grid_1.DxoMinorGridModule,
                minor_tick_1.DxoMinorTickModule,
                minor_tick_interval_1.DxoMinorTickIntervalModule,
                strip_dxi_1.DxiStripModule,
                strip_style_1.DxoStripStyleModule,
                tick_1.DxoTickModule,
                tick_interval_1.DxoTickIntervalModule,
                title_1.DxoTitleModule,
                common_axis_settings_1.DxoCommonAxisSettingsModule,
                common_pane_settings_1.DxoCommonPaneSettingsModule,
                border_1.DxoBorderModule,
                common_series_settings_1.DxoCommonSeriesSettingsModule,
                area_1.DxoAreaModule,
                hover_style_1.DxoHoverStyleModule,
                hatching_1.DxoHatchingModule,
                connector_1.DxoConnectorModule,
                point_1.DxoPointModule,
                image_1.DxoImageModule,
                height_1.DxoHeightModule,
                url_1.DxoUrlModule,
                width_1.DxoWidthModule,
                selection_style_1.DxoSelectionStyleModule,
                reduction_1.DxoReductionModule,
                value_error_bar_1.DxoValueErrorBarModule,
                bar_1.DxoBarModule,
                bubble_1.DxoBubbleModule,
                candlestick_1.DxoCandlestickModule,
                fullstackedarea_1.DxoFullstackedareaModule,
                fullstackedbar_1.DxoFullstackedbarModule,
                fullstackedline_1.DxoFullstackedlineModule,
                fullstackedspline_1.DxoFullstackedsplineModule,
                fullstackedsplinearea_1.DxoFullstackedsplineareaModule,
                argument_format_1.DxoArgumentFormatModule,
                line_1.DxoLineModule,
                rangearea_1.DxoRangeareaModule,
                rangebar_1.DxoRangebarModule,
                scatter_1.DxoScatterModule,
                spline_1.DxoSplineModule,
                splinearea_1.DxoSplineareaModule,
                stackedarea_1.DxoStackedareaModule,
                stackedbar_1.DxoStackedbarModule,
                stackedline_1.DxoStackedlineModule,
                stackedspline_1.DxoStackedsplineModule,
                stackedsplinearea_1.DxoStackedsplineareaModule,
                steparea_1.DxoStepareaModule,
                stepline_1.DxoSteplineModule,
                stock_1.DxoStockModule,
                crosshair_1.DxoCrosshairModule,
                horizontal_line_1.DxoHorizontalLineModule,
                vertical_line_1.DxoVerticalLineModule,
                data_prepare_settings_1.DxoDataPrepareSettingsModule,
                export_1.DxoExportModule,
                legend_1.DxoLegendModule,
                margin_1.DxoMarginModule,
                loading_indicator_1.DxoLoadingIndicatorModule,
                pane_dxi_1.DxiPaneModule,
                scroll_bar_1.DxoScrollBarModule,
                series_dxi_1.DxiSeriesModule,
                series_template_1.DxoSeriesTemplateModule,
                size_1.DxoSizeModule,
                subtitle_1.DxoSubtitleModule,
                tooltip_1.DxoTooltipModule,
                shadow_1.DxoShadowModule,
                value_axis_dxi_1.DxiValueAxisModule,
                template_1.DxTemplateModule
            ],
            declarations: [
                DxChartComponent
            ],
            exports: [
                DxChartComponent,
                adaptive_layout_1.DxoAdaptiveLayoutModule,
                animation_1.DxoAnimationModule,
                argument_axis_1.DxoArgumentAxisModule,
                constant_line_dxi_1.DxiConstantLineModule,
                label_1.DxoLabelModule,
                font_1.DxoFontModule,
                constant_line_style_1.DxoConstantLineStyleModule,
                grid_1.DxoGridModule,
                format_1.DxoFormatModule,
                overlapping_behavior_1.DxoOverlappingBehaviorModule,
                minor_grid_1.DxoMinorGridModule,
                minor_tick_1.DxoMinorTickModule,
                minor_tick_interval_1.DxoMinorTickIntervalModule,
                strip_dxi_1.DxiStripModule,
                strip_style_1.DxoStripStyleModule,
                tick_1.DxoTickModule,
                tick_interval_1.DxoTickIntervalModule,
                title_1.DxoTitleModule,
                common_axis_settings_1.DxoCommonAxisSettingsModule,
                common_pane_settings_1.DxoCommonPaneSettingsModule,
                border_1.DxoBorderModule,
                common_series_settings_1.DxoCommonSeriesSettingsModule,
                area_1.DxoAreaModule,
                hover_style_1.DxoHoverStyleModule,
                hatching_1.DxoHatchingModule,
                connector_1.DxoConnectorModule,
                point_1.DxoPointModule,
                image_1.DxoImageModule,
                height_1.DxoHeightModule,
                url_1.DxoUrlModule,
                width_1.DxoWidthModule,
                selection_style_1.DxoSelectionStyleModule,
                reduction_1.DxoReductionModule,
                value_error_bar_1.DxoValueErrorBarModule,
                bar_1.DxoBarModule,
                bubble_1.DxoBubbleModule,
                candlestick_1.DxoCandlestickModule,
                fullstackedarea_1.DxoFullstackedareaModule,
                fullstackedbar_1.DxoFullstackedbarModule,
                fullstackedline_1.DxoFullstackedlineModule,
                fullstackedspline_1.DxoFullstackedsplineModule,
                fullstackedsplinearea_1.DxoFullstackedsplineareaModule,
                argument_format_1.DxoArgumentFormatModule,
                line_1.DxoLineModule,
                rangearea_1.DxoRangeareaModule,
                rangebar_1.DxoRangebarModule,
                scatter_1.DxoScatterModule,
                spline_1.DxoSplineModule,
                splinearea_1.DxoSplineareaModule,
                stackedarea_1.DxoStackedareaModule,
                stackedbar_1.DxoStackedbarModule,
                stackedline_1.DxoStackedlineModule,
                stackedspline_1.DxoStackedsplineModule,
                stackedsplinearea_1.DxoStackedsplineareaModule,
                steparea_1.DxoStepareaModule,
                stepline_1.DxoSteplineModule,
                stock_1.DxoStockModule,
                crosshair_1.DxoCrosshairModule,
                horizontal_line_1.DxoHorizontalLineModule,
                vertical_line_1.DxoVerticalLineModule,
                data_prepare_settings_1.DxoDataPrepareSettingsModule,
                export_1.DxoExportModule,
                legend_1.DxoLegendModule,
                margin_1.DxoMarginModule,
                loading_indicator_1.DxoLoadingIndicatorModule,
                pane_dxi_1.DxiPaneModule,
                scroll_bar_1.DxoScrollBarModule,
                series_dxi_1.DxiSeriesModule,
                series_template_1.DxoSeriesTemplateModule,
                size_1.DxoSizeModule,
                subtitle_1.DxoSubtitleModule,
                tooltip_1.DxoTooltipModule,
                shadow_1.DxoShadowModule,
                value_axis_dxi_1.DxiValueAxisModule,
                template_1.DxTemplateModule
            ],
        })
    ], DxChartModule);
    return DxChartModule;
}());
exports.DxChartModule = DxChartModule;
//# sourceMappingURL=chart.js.map